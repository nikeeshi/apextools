{"version":3,"sources":["i18n.ts","component/OnOffToggle.tsx","component/RadioStyleSelector.tsx","data.ts","rpCalculator.ts","util/range.ts","component/LanguageSwitch.tsx","component/Breakdown.tsx","component/App.tsx","AppRoot.tsx","reportWebVitals.ts","index.tsx"],"names":["i18n","use","initReactI18next","LanguageDetector","init","resources","interpolation","escapeValue","OnOffToggle","label","current","value","setter","type","checked","onChange","RadioStyleSelectorOption","onClick","selected","css","borderWidth","borderStyle","borderColor","backgroundColor","marginLeft","RadioStyleSelector","list","itemLabel","selectedItem","select","map","item","index","calcRPFromPlacement","placement","calcRPPerKill","RP_FROM_KILL_CAP","Tiers","ENTRY_COST","Bronze","Silver","Gold","Platinum","Diamond","Master","calcRPFromKill","killPoint","rpPerKill","Math","min","range","from","to","arr","i","push","LanguageSwitch","useTranslation","languageList","currentLg","language","languageListInOrder","filter","lg","concat","position","top","right","code","name","href","lng","changeLanguage","Breakdown","props","t","rpFromPlacement","rpFromKill","lostForgivenessRP","lostForgiveness","tier","KABreakDown","Formula","rawKARP","Inputs","a","String","Output","totalRP","result","rp","max","calcRP","marginTop","App","useState","AppRoot","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bbcb303.chunk.js","sourcesContent":["import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport resources from \"./translations.json\";\n\ni18n\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .init({\n    resources,\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","import { ValueSetterPair } from \"../variable/valueSetterPair\";\n\ntype Props = {\n  label: string;\n  current: ValueSetterPair<boolean>;\n};\nexport function OnOffToggle({\n  label,\n  current: [value, setter],\n}: Props) {\n  return (\n    <label>\n      {label}{\" \"}\n      <input\n        type=\"checkbox\"\n        checked={value}\n        onChange={() => setter(!value)}\n      />\n    </label>\n  );\n}\n","/** @jsxImportSource @emotion/react */\nimport { jsx } from \"@emotion/react/macro\";\nimport { ValueSetterPair } from \"../variable/valueSetterPair\";\n\nexport type RadioStyleSelectorProps<Item> = {\n  label: string;\n  list: readonly Item[];\n  selected: ValueSetterPair<Item>;\n  itemLabel: (i: Item) => string;\n};\ntype RadioStyleSelectorOptionProps = {\n  onClick: () => void;\n  selected: boolean;\n  label: string;\n};\n\nexport function RadioStyleSelectorOption({\n  onClick,\n  selected,\n  label,\n}: RadioStyleSelectorOptionProps) {\n  return (\n    <button\n      onClick={onClick}\n      css={{\n        borderWidth: 1,\n        borderStyle: \"solid\",\n        borderColor: selected ? \"#000000\" : \"#efefef\",\n        backgroundColor: \"#efefef\",\n        marginLeft: 0,\n      }}\n    >\n      {label}\n    </button>\n  );\n}\nexport function RadioStyleSelector<Item extends any>({\n  label,\n  selected,\n  list,\n  itemLabel,\n}: RadioStyleSelectorProps<Item>) {\n  const [selectedItem, select] = selected;\n  return (\n    <label>\n      {label}{\" \"}\n      <div>\n        {list.map((item, index) => (\n          <RadioStyleSelectorOption\n            onClick={() => {\n              select(item);\n            }}\n            selected={selectedItem === item}\n            label={itemLabel(item)}\n            key={index}\n          />\n        ))}\n      </div>\n    </label>\n  );\n}\n","export function calcRPFromPlacement(\n  placement: number\n): number {\n  const RP: { [p: number]: number } = {\n    1: 125,\n    2: 95,\n    3: 70,\n    4: 55,\n    5: 45,\n    6: 30,\n    7: 20,\n    8: 20,\n    9: 10,\n    10: 10,\n    11: 5,\n    12: 5,\n    13: 5,\n  };\n  return RP[placement] ?? 0;\n}\nexport function calcRPPerKill(placement: number): number {\n  const RP: { [p: number]: number } = {\n    1: 15,\n    2: 11,\n    3: 8,\n    4: 5,\n    5: 5,\n    6: 1,\n    7: 1,\n    8: 1,\n    9: 1,\n    10: 1,\n  };\n  return (RP[placement] ?? 0) + 10;\n}\nexport const RP_FROM_KILL_CAP = 125;\nexport const Tiers = [\n  \"Bronze\",\n  \"Silver\",\n  \"Gold\",\n  \"Platinum\",\n  \"Diamond\",\n  \"Master\",\n  \"Apex Predator\",\n] as const;\nexport type Tier = typeof Tiers[number];\nexport const ENTRY_COST = {\n  Bronze: 0,\n  Silver: 12,\n  Gold: 24,\n  Platinum: 36,\n  Diamond: 48,\n  Master: 60,\n  \"Apex Predator\": 60,\n};\n","import { calcRPFromPlacement, calcRPPerKill, RP_FROM_KILL_CAP, Tier } from \"./data\";\n\nexport const ENTRY_COST = {\n  Bronze: 0,\n  Silver: 12,\n  Gold: 24,\n  Platinum: 36,\n  Diamond: 48,\n  Master: 60,\n  \"Apex Predator\": 60,\n};\ntype Result = {\n  placement: number;\n  killPoint: number;\n  tier: Tier;\n  lostForgiveness: boolean;\n};\nexport function calcRP(result: Result): number {\n  const rp =\n    calcRPFromKill(result) +\n    calcRPFromPlacement(result.placement) -\n    ENTRY_COST[result.tier];\n  return result.lostForgiveness ? Math.max(0, rp) : rp;\n}\n\nexport function calcRPFromKill({\n  placement,\n  killPoint,\n}: Result): number {\n  const rpPerKill = calcRPPerKill(placement);\n  return Math.min(rpPerKill * killPoint, RP_FROM_KILL_CAP);\n}\n","export function range(from: number, to: number) {\n  const arr = [];\n  for (let i = from; i <= to; i++) arr.push(i);\n  return arr;\n}\n","/** @jsxImportSource @emotion/react */\nimport { jsx } from \"@emotion/react/macro\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function LanguageSwitch() {\n  const { i18n } = useTranslation();\n  const changeLanguage = (lng: string) => {\n    i18n.changeLanguage(lng);\n  };\n  const languageList = [\n    [\"ja\", \"日本語\"],\n    [\"en\", \"English\"],\n  ];\n  const currentLg = i18n.language;\n  const languageListInOrder = languageList\n    .filter((lg) => lg[0] === currentLg)\n    .concat(\n      languageList.filter((lg) => lg[0] !== currentLg)\n    );\n  return (\n    <div\n      css={{\n        position: \"absolute\",\n        top: 24,\n        right: 24,\n      }}\n    >\n      {languageListInOrder.map(([code, name], index) => (\n        <>\n          {index !== 0 && \"/\"}\n          <a\n            href=\"#\"\n            onClick={() => {\n              changeLanguage(code);\n            }}\n          >\n            {name}\n          </a>\n        </>\n      ))}\n    </div>\n  );\n}\n","import { useTranslation } from \"react-i18next\";\nimport {\n  calcRPFromPlacement,\n  calcRPPerKill,\n  ENTRY_COST,\n  RP_FROM_KILL_CAP,\n  Tier,\n} from \"../data\";\nimport { calcRPFromKill } from \"../rpCalculator\";\ntype Props = {\n  placement: number;\n  killPoint: number;\n  tier: Tier;\n  lostForgiveness: boolean;\n};\nexport default function Breakdown(props: Props) {\n  const { t } = useTranslation();\n  const rpFromPlacement = calcRPFromPlacement(\n    props.placement\n  );\n  const rpFromKill = calcRPFromKill(props);\n  const lostForgivenessRP = props.lostForgiveness\n    ? -Math.min(\n        0,\n        rpFromKill +\n          rpFromPlacement -\n          ENTRY_COST[props.tier]\n      )\n    : 0;\n  return (\n    <details>\n      <summary>{t(\"Breakdown\")}</summary>\n      <div>\n        {t(\"Base RP from placement\")}: {rpFromPlacement}\n      </div>\n      <KABreakDown {...props} />\n      <div>\n        {t(\"Entry cost\")}: {-ENTRY_COST[props.tier]}\n      </div>\n      <div>\n        {t(\"Lost Forgiveness\")}:{\" \"}\n        {lostForgivenessRP !== 0 ? lostForgivenessRP : \"--\"}\n      </div>\n    </details>\n  );\n}\nfunction Formula(props: Props) {\n  return (\n    <>\n      {calcRPPerKill(props.placement) * props.killPoint} ={\" \"}\n      {calcRPPerKill(props.placement)} * {props.killPoint}{\" \"}\n    </>\n  );\n}\nfunction KABreakDown(props: Props) {\n  const { t } = useTranslation();\n  const rawKARP =\n    calcRPPerKill(props.placement) * props.killPoint;\n  return (\n    <div>\n      {t(\"Bonus RP from Kill/Assist\")}:{\" \"}\n      {rawKARP > RP_FROM_KILL_CAP ? (\n        <>\n          <del>\n            <Formula {...props} />\n          </del>\n        </>\n      ) : (\n        <Formula {...props} />\n      )}{\" \"}\n      {rawKARP >= RP_FROM_KILL_CAP && (\n        <>(Max: {RP_FROM_KILL_CAP})</>\n      )}\n    </div>\n  );\n}\n","/** @jsxImportSource @emotion/react */\nimport { jsx } from \"@emotion/react/macro\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { OnOffToggle } from \"./OnOffToggle\";\nimport { RadioStyleSelector } from \"./RadioStyleSelector\";\nimport { Tier, Tiers } from \"../data\";\nimport { calcRP } from \"../rpCalculator\";\nimport { range } from \"../util/range\";\nimport { ValueSetterPair } from \"../variable/valueSetterPair\";\nimport LanguageSwitch from \"./LanguageSwitch\";\nimport Breakdown from \"./Breakdown\";\nfunction Inputs({\n  placement,\n  killPoint,\n  tier,\n  lostForgiveness,\n}: {\n  placement: ValueSetterPair<number>;\n  killPoint: ValueSetterPair<number>;\n  tier: ValueSetterPair<Tier>;\n  lostForgiveness: ValueSetterPair<boolean>;\n}) {\n  const { t } = useTranslation();\n\n  return (\n    <div>\n      <div>\n        <RadioStyleSelector\n          selected={placement}\n          label={t(\"Placement\")}\n          list={range(1, 20)}\n          itemLabel={(a) => String(a)}\n        />\n      </div>\n      <div>\n        <RadioStyleSelector\n          selected={killPoint}\n          label={t(\"Kill/Assist Points\")}\n          list={range(0, 20)}\n          itemLabel={(a) => String(a)}\n        />\n      </div>\n      <div>\n        <RadioStyleSelector\n          selected={tier}\n          label={t(\"Tier\")}\n          list={Tiers}\n          itemLabel={(a) => t(a)}\n        />\n      </div>\n      <div>\n        <OnOffToggle\n          current={lostForgiveness}\n          label={t(\"Lost Forgiveness\")}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction Output(props: {\n  placement: number;\n  killPoint: number;\n  tier: Tier;\n  lostForgiveness: boolean;\n}) {\n  const { t } = useTranslation();\n  const totalRP = calcRP(props);\n  return (\n    <div css={{ marginTop: 24 }}>\n      <div>\n        {t(\"Earned RP\") + \": \"}\n        {totalRP}\n      </div>\n      <Breakdown {...props} />\n    </div>\n  );\n}\nexport default function App() {\n  const placement = useState<number>(1);\n  const killPoint = useState<number>(0);\n  const tier = useState<Tier>(Tiers[0]);\n  const lostForgiveness = useState<boolean>(false);\n  const { t } = useTranslation();\n  return (\n    <div>\n      <h1>{t(\"Apex Legends RP calculator\")}</h1>\n      <LanguageSwitch />\n      <Inputs\n        placement={placement}\n        killPoint={killPoint}\n        tier={tier}\n        lostForgiveness={lostForgiveness}\n      />\n      <Output\n        placement={placement[0]}\n        killPoint={killPoint[0]}\n        tier={tier[0]}\n        lostForgiveness={lostForgiveness[0]}\n      />\n    </div>\n  );\n}\n","import App from \"./component/App\";\n\n\nexport default function AppRoot() {\n  return <App/>;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './i18n';\nimport App from './AppRoot';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}