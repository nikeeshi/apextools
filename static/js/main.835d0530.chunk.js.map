{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Inputs","rank","setRank","kp","setKP","tier","setTier","type","min","max","step","value","onChange","e","target","parseInt","Output","rpPerKill","totalRP","Math","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gKACA,SAASA,EAAT,GAcI,IAbFC,EAaC,EAbDA,KACAC,EAYC,EAZDA,QACAC,EAWC,EAXDA,GACAC,EAUC,EAVDA,MACAC,EASC,EATDA,KACAC,EAQC,EARDA,QASA,OACE,gCACE,yCAEE,uBACEC,KAAK,SACLC,IAAI,IACJC,IAAI,KACJC,KAAK,IACLC,MAAK,OAAEV,QAAF,IAAEA,IAAQ,GACfW,SAAU,SAACC,GAAD,OACRX,EACqB,OAAnBW,EAAEC,OAAOH,MAAiB,KAAOI,SAASF,EAAEC,OAAOH,MAAO,WAKlE,sDAEE,uBACEJ,KAAK,SACLC,IAAI,IACJC,IAAI,KACJC,KAAK,IACLC,MAAK,OAAER,QAAF,IAAEA,IAAM,GACbS,SAAU,SAACC,GAAD,OACRT,EAAyB,OAAnBS,EAAEC,OAAOH,MAAiB,KAAOI,SAASF,EAAEC,OAAOH,MAAO,WAItE,yCAEE,uBACEJ,KAAK,SACLC,IAAI,IACJC,IAAI,IACJC,KAAK,IACLC,MAAK,OAAEN,QAAF,IAAEA,IAAQ,GACfO,SAAU,SAACC,GAAD,OACRP,EACqB,OAAnBO,EAAEC,OAAOH,MAAiB,KAAOI,SAASF,EAAEC,OAAOH,MAAO,cASxE,SAASK,EAAT,GAQI,IAPFf,EAOC,EAPDA,KACAE,EAMC,EANDA,GACAE,EAKC,EALDA,KAMA,GAAa,OAATJ,GAAwB,OAAPE,GAAwB,OAATE,EAAe,CACjD,IAgBMY,EACJhB,EAAO,GAAK,GAAKA,EAAO,EAAI,GAAKA,EAAO,EAAI,GAAKA,EAAO,EAAI,GAAK,GAC7DiB,GAjBJjB,EAAO,GACH,EACAA,EAAO,GACP,EACAA,EAAO,EACP,GACAA,EAAO,EACP,GACAA,EAAO,EACP,GACAA,EAAO,EACP,GACAA,EAAO,EACP,GACA,KAG4BkB,KAAKX,IAAIS,EAAYd,EAAI,KAC3D,OACE,8BACE,+CAAkBe,OAIxB,OAAO,KAqBME,MAnBf,WAAgB,IAAD,EACWC,mBAAwB,MADnC,mBACNpB,EADM,KACAC,EADA,OAEOmB,mBAAwB,MAF/B,mBAENlB,EAFM,KAEFC,EAFE,OAGWiB,mBAAwB,MAHnC,mBAGNhB,EAHM,KAGAC,EAHA,KAIb,OACE,gCACE,cAACN,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,GAAIA,EACJC,MAAOA,EACPC,KAAMA,EACNC,QAASA,IAEX,cAACU,EAAD,CAAQf,KAAMA,EAAME,GAAIA,EAAIE,KAAMA,QCtGzBiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.835d0530.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction, useState } from \"react\";\nfunction Inputs({\n  rank,\n  setRank,\n  kp,\n  setKP,\n  tier,\n  setTier,\n}: {\n  rank: number | null;\n  setRank: Dispatch<SetStateAction<number | null>>;\n  kp: number | null;\n  setKP: Dispatch<SetStateAction<number | null>>;\n  tier: number | null;\n  setTier: Dispatch<SetStateAction<number | null>>;\n}) {\n  return (\n    <div>\n      <label>\n        Rank\n        <input\n          type=\"number\"\n          min=\"1\"\n          max=\"20\"\n          step=\"1\"\n          value={rank ?? \"\"}\n          onChange={(e) =>\n            setRank(\n              e.target.value === null ? null : parseInt(e.target.value, 10)\n            )\n          }\n        />\n      </label>\n      <label>\n        Kill/Assist Point\n        <input\n          type=\"number\"\n          min=\"0\"\n          max=\"20\"\n          step=\"1\"\n          value={kp ?? \"\"}\n          onChange={(e) =>\n            setKP(e.target.value === null ? null : parseInt(e.target.value, 10))\n          }\n        />\n      </label>\n      <label>\n        Tier\n        <input\n          type=\"number\"\n          min=\"0\"\n          max=\"4\"\n          step=\"1\"\n          value={tier ?? \"\"}\n          onChange={(e) =>\n            setTier(\n              e.target.value === null ? null : parseInt(e.target.value, 10)\n            )\n          }\n        />\n      </label>\n    </div>\n  );\n}\n\nfunction Output({\n  rank,\n  kp,\n  tier,\n}: {\n  rank: number | null;\n  kp: number | null;\n  tier: number | null;\n}) {\n  if (rank !== null && kp !== null && tier !== null) {\n    const rpFromPlacement =\n      rank > 13\n        ? 0\n        : rank > 10\n        ? 5\n        : rank > 8\n        ? 10\n        : rank > 6\n        ? 20\n        : rank > 4\n        ? 30\n        : rank > 2\n        ? 40\n        : rank > 1\n        ? 60\n        : 100;\n    const rpPerKill =\n      rank > 10 ? 10 : rank > 5 ? 12 : rank > 3 ? 15 : rank > 1 ? 20 : 25;\n    const totalRP = rpFromPlacement + Math.min(rpPerKill * kp, 175);\n    return (\n      <div>\n        <label>Total RP: {totalRP}</label>\n      </div>\n    );\n  }\n  return null;\n}\nfunction App() {\n  const [rank, setRank] = useState<number | null>(null);\n  const [kp, setKP] = useState<number | null>(null);\n  const [tier, setTier] = useState<number | null>(null);\n  return (\n    <div>\n      <Inputs\n        rank={rank}\n        setRank={setRank}\n        kp={kp}\n        setKP={setKP}\n        tier={tier}\n        setTier={setTier}\n      />\n      <Output rank={rank} kp={kp} tier={tier} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}