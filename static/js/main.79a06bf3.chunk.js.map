{"version":3,"sources":["component/dropdownmenu.tsx","data.ts","rpCalculator.ts","util/range.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DropDownMenu","label","setter","list","onChange","e","target","value","map","item","Tiers","ENTRY_COST","Bronze","Silver","Gold","Platinum","Diamond","Master","calcRP","result","rp","placement","killPoint","rpPerKill","1","2","3","4","5","6","7","8","9","10","calcRPPerKill","Math","min","calcRPFromKill","11","12","13","calcRPFromPlacement","tier","lostForgiveness","max","range","from","to","arr","i","push","Inputs","setPlacement","setKP","killpoint","setTier","parseInt","v","String","Output","totalRP","App","useState","setRank","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79a06bf3.chunk.js","sourcesContent":["type Props<Item extends string> = {\r\n  label: string;\r\n  list: readonly Item[];\r\n  setter: (item: Item) => void;\r\n};\r\nexport function DropDownMenu<Item extends string>({\r\n  label,\r\n  setter,\r\n  list,\r\n}: Props<Item>) {\r\n  return (\r\n    <label>\r\n      {label}\r\n      <select\r\n        onChange={(e) => setter(e.target.value as Item)}\r\n      >\r\n        {list.map((item) => (\r\n          <option value={item}>{item}</option>\r\n        ))}\r\n      </select>\r\n    </label>\r\n  );\r\n}\r\n","export function calcRPFromPlacement(\r\n  placement: number\r\n): number {\r\n  const RP: { [p: number]: number } = {\r\n    1: 125,\r\n    2: 95,\r\n    3: 70,\r\n    4: 55,\r\n    5: 45,\r\n    6: 30,\r\n    7: 20,\r\n    8: 20,\r\n    9: 10,\r\n    10: 10,\r\n    11: 5,\r\n    12: 5,\r\n    13: 5,\r\n  };\r\n  return RP[placement] ?? 0;\r\n}\r\nexport function calcRPPerKill(placement: number): number {\r\n  const RP: { [p: number]: number } = {\r\n    1: 15,\r\n    2: 11,\r\n    3: 8,\r\n    4: 5,\r\n    5: 5,\r\n    6: 1,\r\n    7: 1,\r\n    8: 1,\r\n    9: 1,\r\n    10: 1,\r\n  };\r\n  return (RP[placement] ?? 0) + 10;\r\n}\r\nexport const RP_FROM_KILL_CAP = 125;\r\nexport const Tiers = [\r\n  \"Bronze\",\r\n  \"Silver\",\r\n  \"Gold\",\r\n  \"Platinum\",\r\n  \"Diamond\",\r\n  \"Master\",\r\n  \"Apex Predator\",\r\n] as const;\r\nexport type Tier = typeof Tiers[number];\r\nexport const ENTRY_COST = {\r\n  Bronze: 0,\r\n  Silver: 12,\r\n  Gold: 24,\r\n  Platinum: 36,\r\n  Diamond: 48,\r\n  Master: 60,\r\n  \"Apex Predator\": 60,\r\n};\r\n","import { calcRPFromPlacement, calcRPPerKill, RP_FROM_KILL_CAP } from \"./data\";\r\n\r\nexport type Tier =\r\n  | \"Bronze\"\r\n  | \"Silver\"\r\n  | \"Gold\"\r\n  | \"Platinum\"\r\n  | \"Diamond\"\r\n  | \"Master\"\r\n  | \"Apex Predator\";\r\nexport const ENTRY_COST = {\r\n  Bronze: 0,\r\n  Silver: 12,\r\n  Gold: 24,\r\n  Platinum: 36,\r\n  Diamond: 48,\r\n  Master: 60,\r\n  \"Apex Predator\": 60,\r\n};\r\ntype Result = {\r\n  placement: number;\r\n  killPoint: number;\r\n  tier: Tier;\r\n  lostForgiveness: boolean;\r\n};\r\nexport function calcRP(result: Result): number {\r\n  const rp =\r\n    calcRPFromKill(result) +\r\n    calcRPFromPlacement(result.placement) -\r\n    ENTRY_COST[result.tier];\r\n  return result.lostForgiveness ? Math.max(0, rp) : rp;\r\n}\r\n\r\nexport function calcRPFromKill({\r\n  placement,\r\n  killPoint,\r\n}: Result): number {\r\n  const rpPerKill = calcRPPerKill(placement);\r\n  return Math.min(rpPerKill * killPoint, RP_FROM_KILL_CAP);\r\n}\r\n","export function range(from: number, to: number) {\r\n  const arr = [];\r\n  for (let i = from; i <= to; i++) arr.push(i);\r\n  return arr;\r\n}\r\n","import { Dispatch, SetStateAction, useState } from \"react\";\nimport { DropDownMenu } from \"./component/dropdownmenu\";\nimport { Tiers } from \"./data\";\nimport { calcRP, Tier } from \"./rpCalculator\";\nimport { range } from \"./util/range\";\nfunction Inputs({\n  placement,\n  setPlacement,\n  killpoint,\n  setKP,\n  tier,\n  setTier,\n}: {\n  placement: number | null;\n  setPlacement: Dispatch<SetStateAction<number | null>>;\n  killpoint: number | null;\n  setKP: Dispatch<SetStateAction<number | null>>;\n  tier: Tier | null;\n  setTier: Dispatch<SetStateAction<Tier | null>>;\n}) {\n  return (\n    <div>\n      <div>\n        <DropDownMenu\n          label=\"Placement\"\n          setter={(placement) =>\n            setPlacement(parseInt(placement, 10))\n          }\n          list={range(1, 20).map((v) => String(v))}\n        />\n      </div>\n      <div>\n        \n      <DropDownMenu\n          label=\"Kill/Assist Point\"\n          setter={(killpoint) =>\n            setKP(parseInt(killpoint, 10))\n          }\n          list={range(0, 20).map((v) => String(v))}\n        />\n      </div>\n      <div>\n        <DropDownMenu\n          label=\"Tier\"\n          setter={(tier) => setTier(tier)}\n          list={Tiers}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction Output({\n  placement,\n  killpoint: killPoint,\n  tier,\n}: {\n  placement: number | null;\n  killpoint: number | null;\n  tier: Tier | null;\n}) {\n  if (\n    placement !== null &&\n    killPoint !== null &&\n    tier !== null\n  ) {\n    const totalRP = calcRP({\n      placement,\n      killPoint,\n      tier,\n      lostForgiveness: false, //TODO 後でなおす\n    });\n    return (\n      <div>\n        <label>Total RP: {totalRP}</label>\n      </div>\n    );\n  }\n  return null;\n}\nfunction App() {\n  const [placement, setRank] = useState<number | null>(\n    null\n  );\n  const [killpoint, setKP] = useState<number | null>(null);\n  const [tier, setTier] = useState<Tier | null>(null);\n  return (\n    <div>\n      <Inputs\n        placement={placement}\n        setPlacement={setRank}\n        killpoint={killpoint}\n        setKP={setKP}\n        tier={tier}\n        setTier={setTier}\n      />\n      <Output\n        placement={placement}\n        killpoint={killpoint}\n        tier={tier}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}