{"version":3,"sources":["component/OnOffToggle.tsx","component/RadioStyleSelector.tsx","data.ts","rpCalculator.ts","util/range.ts","variable/valueSetterPair.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["OnOffToggle","label","current","value","setter","type","checked","onChange","RadioStyleSelectorOption","onClick","selected","style","borderWidth","RadioStyleSelector","list","selectedItem","select","map","item","Tiers","ENTRY_COST","Bronze","Silver","Gold","Platinum","Diamond","Master","calcRP","result","rp","placement","killPoint","rpPerKill","calcRPPerKill","Math","min","calcRPFromKill","calcRPFromPlacement","tier","lostForgiveness","max","range","from","to","arr","i","push","applyFnToVSPair","fn","reverseFn","setValue","a","Function","b","Inputs","killpoint","placementStr","v","String","str","parseInt","killpointStr","Output","totalRP","App","useState","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f56ee7ee.chunk.js","sourcesContent":["import { ValueSetterPair } from \"../variable/valueSetterPair\";\r\n\r\ntype Props = {\r\n  label: string;\r\n  current: ValueSetterPair<boolean>;\r\n};\r\nexport function OnOffToggle({\r\n  label,\r\n  current: [value, setter],\r\n}: Props) {\r\n  return (\r\n    <label>\r\n      {label}{\" \"}\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={value}\r\n        onChange={() => setter(!value)}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n","import { ValueSetterPair } from \"../variable/valueSetterPair\";\r\n\r\ntype Props<Candidates extends readonly (string | null)[]> =\r\n  {\r\n    label: string;\r\n    list: Candidates;\r\n    selected: ValueSetterPair<Candidates[number]>;\r\n  };\r\ntype RadioStyleSelectorOptionProps = {\r\n  onClick: () => void;\r\n  selected: boolean;\r\n  label: string;\r\n};\r\nexport function RadioStyleSelectorOption({\r\n  onClick,\r\n  selected,\r\n  label,\r\n}: RadioStyleSelectorOptionProps) {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      style={{ borderWidth: selected ? 1 : 0 }}\r\n    >\r\n      {label}\r\n    </button>\r\n  );\r\n}\r\nexport function RadioStyleSelector<\r\n  Candidates extends readonly (string | null)[]\r\n>({ label, selected, list }: Props<Candidates>) {\r\n  const [selectedItem, select] = selected;\r\n  return (\r\n    <label>\r\n      {label}{\" \"}\r\n      <div>\r\n        {list.map((item) => (\r\n          <RadioStyleSelectorOption\r\n            onClick={() => {\r\n              if (selectedItem === item) select(null);\r\n              else select(item);\r\n            }}\r\n            selected={selectedItem === item}\r\n            label={item ?? \"---\"}\r\n          />\r\n        ))}\r\n      </div>\r\n    </label>\r\n  );\r\n}\r\n","export function calcRPFromPlacement(\r\n  placement: number\r\n): number {\r\n  const RP: { [p: number]: number } = {\r\n    1: 125,\r\n    2: 95,\r\n    3: 70,\r\n    4: 55,\r\n    5: 45,\r\n    6: 30,\r\n    7: 20,\r\n    8: 20,\r\n    9: 10,\r\n    10: 10,\r\n    11: 5,\r\n    12: 5,\r\n    13: 5,\r\n  };\r\n  return RP[placement] ?? 0;\r\n}\r\nexport function calcRPPerKill(placement: number): number {\r\n  const RP: { [p: number]: number } = {\r\n    1: 15,\r\n    2: 11,\r\n    3: 8,\r\n    4: 5,\r\n    5: 5,\r\n    6: 1,\r\n    7: 1,\r\n    8: 1,\r\n    9: 1,\r\n    10: 1,\r\n  };\r\n  return (RP[placement] ?? 0) + 10;\r\n}\r\nexport const RP_FROM_KILL_CAP = 125;\r\nexport const Tiers = [\r\n  \"Bronze\",\r\n  \"Silver\",\r\n  \"Gold\",\r\n  \"Platinum\",\r\n  \"Diamond\",\r\n  \"Master\",\r\n  \"Apex Predator\",\r\n] as const;\r\nexport type Tier = typeof Tiers[number];\r\nexport const ENTRY_COST = {\r\n  Bronze: 0,\r\n  Silver: 12,\r\n  Gold: 24,\r\n  Platinum: 36,\r\n  Diamond: 48,\r\n  Master: 60,\r\n  \"Apex Predator\": 60,\r\n};\r\n","import { calcRPFromPlacement, calcRPPerKill, RP_FROM_KILL_CAP } from \"./data\";\r\n\r\nexport type Tier =\r\n  | \"Bronze\"\r\n  | \"Silver\"\r\n  | \"Gold\"\r\n  | \"Platinum\"\r\n  | \"Diamond\"\r\n  | \"Master\"\r\n  | \"Apex Predator\";\r\nexport const ENTRY_COST = {\r\n  Bronze: 0,\r\n  Silver: 12,\r\n  Gold: 24,\r\n  Platinum: 36,\r\n  Diamond: 48,\r\n  Master: 60,\r\n  \"Apex Predator\": 60,\r\n};\r\ntype Result = {\r\n  placement: number;\r\n  killPoint: number;\r\n  tier: Tier;\r\n  lostForgiveness: boolean;\r\n};\r\nexport function calcRP(result: Result): number {\r\n  const rp =\r\n    calcRPFromKill(result) +\r\n    calcRPFromPlacement(result.placement) -\r\n    ENTRY_COST[result.tier];\r\n  return result.lostForgiveness ? Math.max(0, rp) : rp;\r\n}\r\n\r\nexport function calcRPFromKill({\r\n  placement,\r\n  killPoint,\r\n}: Result): number {\r\n  const rpPerKill = calcRPPerKill(placement);\r\n  return Math.min(rpPerKill * killPoint, RP_FROM_KILL_CAP);\r\n}\r\n","export function range(from: number, to: number) {\r\n  const arr = [];\r\n  for (let i = from; i <= to; i++) arr.push(i);\r\n  return arr;\r\n}\r\n","import { Dispatch, SetStateAction } from \"react\";\r\n\r\nexport type ValueSetterPair<T> = [\r\n  T,\r\n  Dispatch<SetStateAction<T>>\r\n];\r\nexport function applyFnToVSPair<T, S>(\r\n  [value, setValue]: ValueSetterPair<T>,\r\n  fn: (a: T) => S,\r\n  reverseFn: (a: S) => T\r\n): ValueSetterPair<S> {\r\n  return [\r\n    fn(value),\r\n    (a: SetStateAction<S>) => {\r\n      if (a instanceof Function)\r\n        setValue((b) => reverseFn(a(fn(b))));\r\n      else setValue(reverseFn(a));\r\n    },\r\n  ];\r\n}","import { useState } from \"react\";\nimport { OnOffToggle } from \"./component/OnOffToggle\";\nimport { RadioStyleSelector } from \"./component/RadioStyleSelector\";\nimport { Tiers } from \"./data\";\nimport { calcRP, Tier } from \"./rpCalculator\";\nimport { range } from \"./util/range\";\nimport {\n  applyFnToVSPair,\n  ValueSetterPair,\n} from \"./variable/valueSetterPair\";\nfunction Inputs({\n  placement,\n  killpoint,\n  tier,\n  lostForgiveness,\n}: {\n  placement: ValueSetterPair<number>;\n  killpoint: ValueSetterPair<number>;\n  tier: ValueSetterPair<Tier>;\n  lostForgiveness: ValueSetterPair<boolean>;\n}) {\n  const placementStr = applyFnToVSPair(\n    placement,\n    (v) => String(v),\n    (str) => parseInt(str, 10)\n  );\n\n  const killpointStr = applyFnToVSPair(\n    killpoint,\n    (v) => String(v),\n    (str) => parseInt(str, 10)\n  );\n  return (\n    <div>\n      <div>\n        <RadioStyleSelector\n          selected={placementStr}\n          label=\"Placement\"\n          list={range(1, 20).map((v) => String(v))}\n        />\n      </div>\n      <div>\n        <RadioStyleSelector\n          selected={killpointStr}\n          label=\"Kill/Assist Point\"\n          list={range(0, 20).map((v) => String(v))}\n        />\n      </div>\n      <div>\n        <RadioStyleSelector\n          selected={tier}\n          label=\"Tier\"\n          list={Tiers}\n        />\n      </div>\n      <div>\n        <OnOffToggle\n          current={lostForgiveness}\n          label=\"Lost Forgiveness\"\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction Output({\n  placement,\n  killpoint: killPoint,\n  tier,\n  lostForgiveness,\n}: {\n  placement: number;\n  killpoint: number;\n  tier: Tier;\n  lostForgiveness: boolean;\n}) {\n  const totalRP = calcRP({\n    placement,\n    killPoint,\n    tier,\n    lostForgiveness,\n  });\n  return (\n    <div>\n      <label>Total RP: {totalRP}</label>\n    </div>\n  );\n}\nfunction App() {\n  const placement = useState<number>(1);\n  const killpoint = useState<number>(0);\n  const tier = useState<Tier>(Tiers[0]);\n  const lostForgiveness = useState<boolean>(false);\n  return (\n    <div>\n      <Inputs\n        placement={placement}\n        killpoint={killpoint}\n        tier={tier}\n        lostForgiveness={lostForgiveness}\n      />\n      <Output\n        placement={placement[0]}\n        killpoint={killpoint[0]}\n        tier={tier[0]}\n        lostForgiveness={lostForgiveness[0]}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}